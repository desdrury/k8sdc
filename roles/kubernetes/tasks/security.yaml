---
# On master
- name: Create certs, tokens and users directories
  file:
    path: /etc/kubernetes/{{ item }}
    state: directory
    owner: kube
    group: kube
    mode:  0770
  with_items:
    - certs
    - tokens
    - users
  tags:
    - k8s_master_dirs

# On master
- name: Ensure that a token auth file exists
  file: 
    path:  /etc/kubernetes/tokens/known_tokens.csv
    state: touch
  changed_when: false


# - name: Populate users for basic auth in API
#   lineinfile:
#     dest: "{{ kube_users_dir }}/known_users.csv"
#     create: yes
#     line: '{{ item.value.pass }},{{ item.key }},{{ item.value.role }}'
#     backup: yes
#   with_dict: "{{ kube_users }}"
#   when: inventory_hostname in "{{ groups['kube-master'] }}"
#   notify: set secret_changed




# Fix for Ansible and DNF issues
# https://github.com/ansible/ansible-modules-extras/issues/471
# - name: Install Yum utilities
#   command: dnf install yum-utils -y
#   args:
#     creates: /usr/bin/repomanage

# On master
- name: Install openssl
  yum:
    name:  openssl
    state: installed

- name: Copy make-ca-cert.sh
  copy:
    src:  make-ca-cert.sh
    dest: /home/{{ admin_user }}/
    mode: 0500
    owner: "{{ admin_user }}"

- name: Run make-ca-cert.sh
  command: /home/{{ admin_user }}/make-ca-cert.sh
  args:
    creates: /etc/kubernetes/certs/server.crt"
  environment:
    MASTER_IP: "{{ api_server_ip }}"
    MASTER_NAME: "{{ inventory_hostname }}"
    DNS_DOMAIN: "{{ kubernetes_dns_domain }}"
    SERVICE_CLUSTER_IP_RANGE: "{{ kubernetes_srv_addr }}"
    CERT_DIR: /etc/kubernetes/certs
    CERT_GROUP: "{{ admin_group }}"

- name: Verify certificate permissions
  file:
    path:  /etc/kubernetes/certs/{{ item }}
    group: kube
    owner: kube
    mode:  0440
  with_items:
    - ca.crt
    - server.crt
    - server.key
    - kubecfg.crt
    - kubecfg.key

- name: Copy the token gen script
  copy:
    src:  kube-gen-token.sh
    dest: /home/{{ admin_user }}/
    mode: 0500
    owner: "{{ admin_user }}"

- name: Generate tokens for master components
  command: "/home/{{ admin_user }}/kube-gen-token.sh {{ item[0] }}-{{ item[1] }}"
  environment:
    TOKEN_DIR: /etc/kubernetes/tokens/
  with_nested:
    - [ "system:controller_manager", "system:scheduler", "system:kubectl" ]
    - "{{ groups['k8sdc-master'] }}"
  register: gentoken
  changed_when: "'Added' in gentoken.stdout"
  notify:
    - Restart master daemons

- name: Generate tokens for node components
  command: "/home/{{ admin_user }}/kube-gen-token.sh {{ item[0] }}-{{ item[1] }}"
  environment:
    TOKEN_DIR: /etc/kubernetes/tokens/
  with_nested:
    - [ 'system:kubelet', 'system:proxy' ]
    - "{{ groups['k8sdc-nodes'] }}"
  register: gentoken
  changed_when: "'Added' in gentoken.stdout"
  notify:
    - Restart master daemons

- name: Get the master token values
  slurp:
    src: "/etc/kubernetes/tokens/{{ item }}-{{ inventory_hostname }}.token"
  with_items:
    - "system:controller_manager"
    - "system:scheduler"
    - "system:kubectl"
  register: tokens

- name: Set token facts
  set_fact:
    controller_manager_token: "{{ tokens.results[0].content|b64decode }}"
    scheduler_token:          "{{ tokens.results[1].content|b64decode }}"
    kubectl_token:            "{{ tokens.results[2].content|b64decode }}"

- name: Write the kubecfg (auth) file for controller-manager
  template: 
    src:  controller-manager.kubeconfig.j2
    dest: /etc/kubernetes/controller-manager.kubeconfig
  notify:
    - Restart kube-controller-manager

- name: write the kubecfg (auth) file for scheduler
  template: 
    src:  scheduler.kubeconfig.j2 
    dest: /etc/kubernetes/scheduler.kubeconfig
  notify:
    - Restart kube-scheduler

- name: write the kubecfg (auth) file for kubectl
  template: 
    src:  kubectl.kubeconfig.j2 
    dest: /etc/kubernetes/kubectl.kubeconfig

