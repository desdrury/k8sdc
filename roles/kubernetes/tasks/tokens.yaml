---
# Generate Kubernetes tokens
# TODO: Put the script in a temporary location and generate tokens there.  
#       Cleanup up tmp dir afterwards!!  (just like with cert generation)
- name: Copy the token gen script
  copy:
    src:   security/kube-gen-token.sh
    dest:  /home/{{ admin_user }}/
    mode:  0500
    owner: "{{ admin_user }}"

- name: Ensure that a token auth file exists
  file: 
    path:  /etc/kubernetes/tokens/known_tokens.csv
    state: touch
  changed_when: false

- name: Generate tokens for master components
  command: >
    /home/{{ admin_user }}/kube-gen-token.sh {{ item[0] }}-{{ item[1] }}
  environment:
    TOKEN_DIR: /etc/kubernetes/tokens/
  with_nested:
    - [ "system:controller_manager", "system:scheduler", "system:kubectl" ]
    - "{{ groups['k8sdc-masters'] }}"
  register: gentoken
  changed_when: "'Added' in gentoken.stdout"
  notify:
    - Restart master daemons


# - name: Generate tokens for node components
#   command: "/home/{{ admin_user }}/kube-gen-token.sh {{ item[0] }}-{{ item[1] }}"
#   environment:
#     TOKEN_DIR: /etc/kubernetes/tokens/
#   with_nested:
#     - [ 'system:kubelet', 'system:proxy' ]
#     - "{{ groups['k8sdc-nodes'] }}"
#   register: gentoken
#   changed_when: "'Added' in gentoken.stdout"
#   notify:
#     - Restart master daemons

- name: Get the master token values
  slurp:
    src: "/etc/kubernetes/tokens/{{ item }}-{{ inventory_hostname }}.token"
  with_items:
    - "system:controller_manager"
    - "system:scheduler"
    - "system:kubectl"
  register: tokens

- name: Set token facts
  set_fact:
    kube_controller_manager_token: "{{ tokens.results[0].content|b64decode }}"
    kube_scheduler_token:          "{{ tokens.results[1].content|b64decode }}"
    kubectl_token:                 "{{ tokens.results[2].content|b64decode }}"